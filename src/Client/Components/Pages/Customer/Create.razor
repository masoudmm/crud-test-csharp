@page "/Customer/Create"

@namespace CustomerCrud.Client.Components.Pages.Customer

@using CustomerCrud.Application.Dtos;
@using CustomerCrud.Application.Features.Commands.Create;
@using CustomerCrud.Application.ViewModels;

<PageTitle>Create Customer</PageTitle>

<h1>Create</h1>
<br />

<EditForm Model=@Model OnValidSubmit=@ValidFormSubmitted>
    <DataAnnotationsValidator />
    @if (Errors is not null)
    {
        <ul class="validation-errors">
            @foreach (var errorItem in Errors)
            {
                <li class="validation-message">@errorItem.Key : @string.Join(", ", errorItem.Value)</li>
            }
        </ul>
    }

    <div class="col-xl-4 col-lg-4 col-md-5 mb-4">
        <label class="form-label">First Name:</label>
        <InputText class="form-control" @bind-Value="Model!.Firstname" />
        <ValidationMessage For="() => Model!.Firstname" />
    </div>

    <div class="col-xl-4 col-lg-4 col-md-5 mb-4">
        <label class="form-label">Last Name:</label>
        <InputText class="form-control" @bind-Value="Model!.Lastname" />
        <ValidationMessage For="() => Model!.Lastname" />
    </div>

    <div class="col-xl-4 col-lg-4 col-md-5 mb-4">
        <div class="form-group">
            <label class="form-label">Date Of Birth:</label>
            <InputDate class="form-control" @bind-Value="Model!.DateOfBirth" />
            <ValidationMessage For="() => Model!.DateOfBirth" />
        </div>
    </div>

    <div class="col-xl-4 col-lg-4 col-md-5 mb-4">
        <div class="form-group">
            <label class="form-label">Phone Number:</label>
            <InputText class="form-control" @bind-Value="Model!.PhoneNumber" />
            <ValidationMessage For="() => Model!.PhoneNumber" />
        </div>
    </div>

    <div class="col-xl-4 col-lg-4 col-md-5 mb-4">
        <div class="form-group">
            <label class="form-label">Email:</label>
            <InputText class="form-control" @bind-Value="Model!.Email" />
            <ValidationMessage For="() => Model!.Email" />
        </div>
    </div>

    <div class="col-xl-4 col-lg-4 col-md-5 mb-4">
        <div class="form-group">
            <label class="form-label">Bank Account Number:</label>
            <InputText class="form-control" @bind-Value="Model!.BankAccountNumber" />
            <ValidationMessage For="() => Model!.BankAccountNumber" />
        </div>
    </div>

    <input type="submit" class="btn btn-primary" value="Save" />
</EditForm>

@code {
    private IDictionary<string, string[]>? Errors;
    private CreateCustomerViewModel Model = new CreateCustomerViewModel();

    protected override async Task OnInitializedAsync()
    {
        Model = new CreateCustomerViewModel()
        {
            Firstname = "John",
            Lastname = "Doe",
            DateOfBirth = new DateTime(1980, 1, 1),
            PhoneNumber = "1111",
            Email = "1@1111",
            BankAccountNumber = "112233444"
        };
    }

    async Task ValidFormSubmitted(EditContext editContext)
    {
        var createdCustomerResponse = await Http.PostAsJsonAsync<CreateCustomerCommand>($"/api/Customers/Create",
        new CreateCustomerCommand(Model.Firstname,
            Model.Lastname,
            Model.DateOfBirth,
            Model.PhoneNumber,
            Model.Email,
            Model.BankAccountNumber));

        if (createdCustomerResponse.IsSuccessStatusCode)
        {
            var createdCustomerDto = await createdCustomerResponse.Content.ReadFromJsonAsync<CustomerDto>();

            Model = new CreateCustomerViewModel();

            Errors = null;
        }
        //TODO: Remove doublicate codes
        //TODO: Handle other status codes
        //TODO: Create a custom component for displaying errors
        else if (createdCustomerResponse.StatusCode == System.Net.HttpStatusCode.BadRequest)
        {
            var validationProblemDetailsString = await createdCustomerResponse.Content.ReadAsStringAsync() ?? "{}";
            var validationProblemDetails = JsonSerializer.Deserialize<ValidationProblemDetails>(validationProblemDetailsString);
            Errors = validationProblemDetails?.Errors;
        }
        else if (createdCustomerResponse.StatusCode == System.Net.HttpStatusCode.InternalServerError)
        {
            var problemDetailsString = await createdCustomerResponse.Content.ReadAsStringAsync() ?? "{}";
            var problemDetails = JsonSerializer.Deserialize<ProblemDetails>(problemDetailsString);

            Errors = new Dictionary<string, string[]>() { };
            Errors.Add(problemDetails?.Title ?? "", new string[1] { problemDetails?.Detail ?? problemDetailsString ?? "ServerInternalError" });
        }

        StateHasChanged();
    }
}
