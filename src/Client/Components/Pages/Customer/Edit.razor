@page "/Customer/Edit/{id:int}"

@namespace CustomerCrud.Client.Components.Pages.Customer

@using AutoMapper
@using CustomerCrud.Application.Dtos;
@using CustomerCrud.Application.Features.Commands.Edit;
@using CustomerCrud.Application.ViewModels;
@using CustomerCrud.Client.Models;

<PageTitle>Edit Customer</PageTitle>

<h1>Edit</h1>
<br />

@if (CustomerToEdit == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <MudCard>
        <MudCardContent>
            <MudForm Model="@CustomerToEdit" @ref="editForm">
                <MudTextField @bind-Value="CustomerToEdit.Firstname" For="@(() => CustomerToEdit.Firstname)" Immediate="true" Label="Firstname" />
                <MudTextField @bind-Value="CustomerToEdit.Lastname" For="@(() => CustomerToEdit.Lastname)" Immediate="true" Label="Lastname" />
                <MudDatePicker For="@(() => CustomerToEdit.DateOfBirth)" />
                <MudTextField @bind-Value="CustomerToEdit.PhoneNumber" For="@(() => CustomerToEdit.PhoneNumber)" Immediate="true" Label="PhoneNumber" />
                <MudTextField @bind-Value="CustomerToEdit.Email" For="@(() => CustomerToEdit.Email)" Immediate="true" Label="Email" />
                <MudTextField @bind-Value="CustomerToEdit.BankAccountNumber" For="@(() => CustomerToEdit.BankAccountNumber)" Immediate="true" Label="BankAccountNumber" />
            </MudForm>
        </MudCardContent>

        <MudCardActions>
            <MudButton Variant="Variant.Outlined" OnClick="(() => ValidFormSubmitted())" Color="Color.Primary">Save</MudButton>
        </MudCardActions>
    </MudCard>
}

@code {
    [Parameter]
    public int Id { get; set; }

    [Inject]
    private IMapper Mapper { get; set; }


    MudForm editForm;

    private IDictionary<string, string[]>? Errors;
    private EditCustomerViewModel? CustomerToEdit;

    protected override async Task OnInitializedAsync()
    {
        var customerToEditDto = await Http.GetFromJsonAsync<CustomerDto>($"/api/Customers/{Id}");

        CustomerToEdit = new EditCustomerViewModel
        {
            Id = customerToEditDto.Id,
            Firstname = customerToEditDto.Firstname,
            Lastname = customerToEditDto.Lastname,
            DateOfBirth = customerToEditDto.DateOfBirth,
            PhoneNumber = customerToEditDto.PhoneNumber,
            Email = customerToEditDto.Email,
            BankAccountNumber = customerToEditDto.BankAccountNumber
        };
    }

    async void ValidFormSubmitted()
    {
        if (editForm.Model is null)
        {
            return;
        }

        var customerEditResponse = await Http
            .PutAsJsonAsync<EditCustomerCommand>($"/api/Customers/Edit",
            Mapper.Map<EditCustomerCommand>(CustomerToEdit));

        if (customerEditResponse.IsSuccessStatusCode)
        {
            var editedCustomerDto = await customerEditResponse.Content.ReadFromJsonAsync<CustomerDto>();

            CustomerToEdit = Mapper.Map<EditCustomerViewModel>(editedCustomerDto);

            Errors = null;
        }

        //TODO: Remove doublicate codes
        //TODO: Handle other status codes
        //TODO: Create a custom component for displaying errors
        else if (customerEditResponse.StatusCode == System.Net.HttpStatusCode.BadRequest)
        {
            var validationProblemDetailsString = await customerEditResponse.Content.ReadAsStringAsync() ?? "{}";
            var validationProblemDetails = JsonSerializer.Deserialize<ValidationProblemDetails>(validationProblemDetailsString);
            Errors = validationProblemDetails?.Errors;
        }
        else if (customerEditResponse.StatusCode == System.Net.HttpStatusCode.InternalServerError)
        {
            var problemDetailsString = await customerEditResponse.Content.ReadAsStringAsync() ?? "{}";
            var problemDetails = JsonSerializer.Deserialize<ProblemDetails>(problemDetailsString);

            Errors = new Dictionary<string, string[]>() { };
            Errors.Add(problemDetails?.Title ?? "", new string[1] { problemDetails?.Detail ?? problemDetailsString ?? "ServerInternalError" });
        }

        StateHasChanged();
    }
}
